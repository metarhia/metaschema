{
  domain: { domain: 'Nomen' },
  category: { domain: 'Nomen' },
  required: { domain: 'Logical' },
  unique: { domain: 'Logical' }, // single field unique key
  hidden: { domain: 'Logical' },
  readOnly: { domain: 'Logical' },
  index: { domain: 'Logical' }, // single field index
  default: { domain: 'Text' }, // default value to be casted to domain
  example: { domain: 'Text' },
  lookup: { domain: 'Logical' }, // true if lookup result
  control: { domain: 'Nomen' }, // GUI visual control name
  expression: { domain: 'Lambda' }, // (record, category) => (value)
  validate: { domain: 'Lambda' }, // (value) => (Boolean)
  normalize: { domain: 'Lambda' }, // (value, category, record) => (value)
  comment: { domain: 'Text' },

  Check: Validate(data => {
    const isDomain = !!data.domain;
    const isCategory = !!data.category;

    // Required just one of fields: domain or category
    if (isDomain && isCategory) return false;
    if (!isDomain && !isCategory) return false;

    const fields = Object.keys(data);

    // Check allowed fields
    const allow = allowed => fields.every(f => allowed.includes(f));

    let kind = data.constructor.name;
    if (!kind && isCategory) kind = 'Category';
    if (data.expression) kind = 'Expression';

    const allowedFields = {
      Include: ['category', 'comment'],
      Master: ['category', 'control', 'comment'],
      Many: ['category', 'comment'],
      Category: ['category', 'lookup', 'required', 'control', 'comment'],
      Expression: ['domain', 'lookup', 'category', 'control', 'comment']
    };

    const allowed = allowedFields[kind];
    const fits = allowFields(allowed);
    if (!fits) return false;

    // Check index definition
    return +data.index + +data.unique < 2;
  }),
}
